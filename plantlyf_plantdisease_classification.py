# -*- coding: utf-8 -*-
"""PlantLyf-PlantDisease-Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GBzaeRBdyIpUNoIQDF8leZMuWGT4cYdv
"""

# prompt: unzip a file in google drive

!unzip "/content/drive/MyDrive/PlantLyfDataset/Plant Disease.zip" -d "/content/drive/MyDrive/PlantLyfDataset/"

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

from keras.layers import Dense, Flatten
from keras.models import Model
from keras.applications.inception_v3 import InceptionV3, preprocess_input
import tensorflow as tf
import tensorflow_datasets as tfds
import keras

#Preprocess data using ImageDataGenerator
data_dir = "/content/drive/MyDrive/PlantLyfDataset/Plant Disease/Train"
train_data = tf.keras.utils.image_dataset_from_directory(
  data_dir,
  validation_split=0.2,
  subset="training",
  seed=123,
  image_size=(256, 256),
  batch_size=16)

val_data = tf.keras.utils.image_dataset_from_directory(
  data_dir,
  validation_split=0.2,
  subset="validation",
  seed=123,
  image_size=(256, 256),
  batch_size=16)

train_data.class_names

#Data visualization
def plotImages():
  plt.figure(figsize=(10, 10))
  for images, labels in train_data.take(1):
    for i in range(9):
      ax = plt.subplot(3, 3, i + 1)
      plt.imshow(images[i].numpy().astype("uint8"))
      plt.title(i)
      plt.axis = False

plotImages()

#TRAIN MODEL
image_batch, labels_batch = next(iter(train_data))
first_image = image_batch[0]
print(np.min(first_image), np.max(first_image))

checkpoint = tf.keras.callbacks.ModelCheckpoint('PlantDisease-Classifier.h5',
                                                save_best_only=True,
                                                save_weights_only=True,
                                                monitor='val_loss',
                                                verbose=1)

early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss',
                                                  patience=5,
                                                  restore_best_weights=True)

reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss',
                                                  factor=0.2,
                                                  patience=3,
                                                  min_lr=1e-6)

num_classes = 38

# Using EfficientNet
model = tf.keras.applications.EfficientNetB0(weights='imagenet', include_top=False, input_shape=(256, 256, 3))
for layer in model.layers:
    layer.trainable = False

model = tf.keras.models.Sequential([
    model,
    tf.keras.layers.GlobalAveragePooling2D(),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(38, activation='softmax')
])

model.compile(
  optimizer='adam',
  loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),
  metrics=['accuracy'])

print(model.summary)

AUTOTUNE = tf.data.AUTOTUNE

train_data = train_data.cache().prefetch(buffer_size=AUTOTUNE)
val_data = val_data.cache().prefetch(buffer_size=AUTOTUNE)

# Train the model
model.fit(
    train_data,
    epochs=15,
    steps_per_epoch=16,
    validation_data=val_data,
    validation_steps=16,
    callbacks=[checkpoint, reduce_lr, early_stopping]
)

model.save('/content/PlantDisease-Classifier.h5')

from keras.saving import load_model
import PIL
from PIL import Image
import imageio
import cv2
import os

loaded_model = load_model('/content/PlantDisease-Classifier.h5')

def show_result(img):
    train_dir = "/content/drive/MyDrive/PlantLyfDataset/Plant Disease/Train"  # Path to training data directory

    # Get the list of subdirectories (class folders)
    class_names = os.listdir(train_dir)

    print("Class Names:", class_names)

    img_path = f"{img}"
    image = cv2.imread(img_path)

    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    img = Image.fromarray(image)

    img = img.resize((256,256))

    img = np.array(img)

    plt.imshow(img)
    plt.show()

    print("Input shape before:", img.shape)
    img = np.expand_dims(img, axis=0)
    print("Input shape after:", img.shape)

    #print("Image Float values",img)
    print(img.shape)

    print("Inaccurate prediction = ",loaded_model.predict(img))
    prediction = np.argmax(loaded_model.predict(img))

    # if prediction == 0:
    #   print("it is an alluvial soil")
    # elif prediction == 1:
    #   print("it is an black soil")
    # elif prediction == 2:
    #   print("it is an clay soil")
    # elif prediction == 3:
    #   print("it is an red soil")
    print(class_names[prediction])

show_result('/content/drive/MyDrive/PlantLyfDataset/Plant Disease/Valid/Grape___Black_rot/0daaeb93-868a-4649-be74-19aa2b231f90___FAM_B.Rot 0739.JPG')

# Load your Keras model
model = tf.keras.models.load_model('/content/PlantDisease-Classifier.h5')

# Convert the model
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

# Save the TFLite model to a file
with open('/content/PlantDisease-Classifier.tflite', 'wb') as f:
    f.write(tflite_model)