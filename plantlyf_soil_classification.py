# -*- coding: utf-8 -*-
"""PlantLyf-soil-classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AZTS2385XM20Tmm9WmNPbOZFh2SnIZ7f
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

from keras.layers import Dense, Flatten
from keras.models import Model
from keras.applications.inception_v3 import InceptionV3, preprocess_input
import tensorflow as tf
import tensorflow_datasets as tfds
import keras

# base_model = InceptionV3(input_shape=(256,256,3), include_top=False)

# for layer in base_model.layers:
#     layer.trainable = False

# X = Flatten()(base_model.output)
# X = Dense(units=4, activation='sigmoid')(X)

# #Final model
# model = Model(base_model.input, X)

# #Compile the model
# model.compile(optimizer='adam', loss=keras.losses.binary_crossentropy, metrics=['accuracy'])

# #summary
# model.summary()

#Preprocess data using ImageDataGenerator
data_dir = "/content/drive/MyDrive/PlantLyfDataset/SoilTypes/Dataset/Train"
train_data = tf.keras.utils.image_dataset_from_directory(
  data_dir,
  validation_split=0.2,
  subset="training",
  seed=123,
  image_size=(256, 256),
  batch_size=32)

val_data = tf.keras.utils.image_dataset_from_directory(
  data_dir,
  validation_split=0.2,
  subset="validation",
  seed=123,
  image_size=(256, 256),
  batch_size=32)

train_data.class_names

#Data visualization
# t_img, label = next(iter(train_data))

def plotImages():
  plt.figure(figsize=(10, 10))
  for images, labels in train_data.take(1):
    for i in range(9):
      ax = plt.subplot(3, 3, i + 1)
      plt.imshow(images[i].numpy().astype("uint8"))
      plt.title(i)
      plt.axis = False

plotImages()

#TRAIN MODEL
image_batch, labels_batch = next(iter(train_data))
first_image = image_batch[0]
print(np.min(first_image), np.max(first_image))

# normalization_layer = tf.keras.layers.Rescaling(1./255)
# train_data = train_data.map(lambda x, y: (normalization_layer(x), y))
# image_batch, labels_batch = next(iter(train_data))
# first_image = image_batch[0]
# # Notice the pixel values are now in `[0,1]`.
# print(np.min(first_image), np.max(first_image))

num_classes = 4

model = tf.keras.Sequential([
  tf.keras.layers.Rescaling(1./255),
  tf.keras.layers.Conv2D(32, 3, activation='relu'),
  tf.keras.layers.MaxPooling2D(),
  tf.keras.layers.Conv2D(32, 3, activation='relu'),
  tf.keras.layers.MaxPooling2D(),
  tf.keras.layers.Conv2D(32, 3, activation='relu'),
  tf.keras.layers.MaxPooling2D(),
  tf.keras.layers.Flatten(),
  tf.keras.layers.Dense(128, activation='relu'),
  tf.keras.layers.Dense(num_classes)
])

model.compile(
  optimizer='adam',
  loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
  metrics=['accuracy'])

print(model.summary)

AUTOTUNE = tf.data.AUTOTUNE

train_data = train_data.cache().prefetch(buffer_size=AUTOTUNE)
val_data = val_data.cache().prefetch(buffer_size=AUTOTUNE)

his=model.fit(train_data,validation_data=val_data,epochs=30)

model.save('./soil_classifier.h5')

from keras.saving import load_model
import PIL
from PIL import Image
import imageio
import cv2

loaded_model = load_model('/content/drive/MyDrive/PlantLyfDataset/soil_classifier.h5')

def show_result(img):
    img_path = f"{img}"
    image = cv2.imread(img_path)

    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    img = Image.fromarray(image)

    img = img.resize((256,256))

    img = np.array(img)

    plt.imshow(img)
    plt.show()

    print("Input shape before:", img.shape)
    img = np.expand_dims(img, axis=0)
    print("Input shape after:", img.shape)

    print("Image Float values",img)
    print(img.shape)

    print("Inaccurate prediction = ",loaded_model.predict(img))
    prediction = np.argmax(loaded_model.predict(img))

    if prediction == 0:
      print("it is an alluvial soil")
    elif prediction == 1:
      print("it is an black soil")
    elif prediction == 2:
      print("it is an clay soil")
    elif prediction == 3:
      print("it is an red soil")

show_result('/content/drive/MyDrive/PlantLyfDataset/SoilTypes/Dataset/test/Clay soil/Clay_9.jpg')

# Load your Keras model
model = tf.keras.models.load_model('/content/drive/MyDrive/PlantLyfDataset/soil_classifier.h5')

# Convert the model
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

# Save the TFLite model to a file
with open('/content/drive/MyDrive/PlantLyfDataset/soil_classifier.tflite', 'wb') as f:
    f.write(tflite_model)



